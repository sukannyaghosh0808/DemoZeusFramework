// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowNunitTestAutomation.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("03_Scheduler POS Page")]
    public partial class _03_SchedulerPOSPageFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "SchedulerPOSPage.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "03_Scheduler POS Page", "Different test scenarios for Scheduler POS Page", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
 testRunner.Given("Launch the Zeus application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.And("I login to the Zeus application with valid credentials", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 7
 testRunner.When("I click on distribution center change button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
 testRunner.And("I select a store named \"5001 | Doctor - Mishawaka\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
 testRunner.Then("The store should change to \"5001 | Doctor - Mishawaka\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 10
 testRunner.Given("I go to the Scheduler menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 11
 testRunner.And("I go to the POS menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.And("Delete any existing appointments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create an eye exam appointment on mrs lane in a corporate store")]
        [NUnit.Framework.CategoryAttribute("TC_Zeus_POS_0001")]
        [NUnit.Framework.CategoryAttribute("PositiveTests")]
        public void CreateAnEyeExamAppointmentOnMrsLaneInACorporateStore()
        {
            string[] tagsOfScenario = new string[] {
                    "TC_Zeus_POS_0001",
                    "PositiveTests"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create an eye exam appointment on mrs lane in a corporate store", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 16
 testRunner.Given("Check for slot availablity in MRS lane \"MRS ( 4 )\" for today\'s date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 17
 testRunner.And("I click on the first available slot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.And("I search and open the \"first\" patient created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "AppointmentType"});
                table11.AddRow(new string[] {
                            "Eye Exam"});
#line 19
 testRunner.And("I provide the following appointment type for scheduling a slot", ((string)(null)), table11, "And ");
#line hidden
#line 22
 testRunner.When("I click on confirmed button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
 testRunner.Then("The appointment is created and succesful message with appointment number is shown" +
                        " on screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create an eye exam appointment on mrs lane in a franchise store")]
        [NUnit.Framework.CategoryAttribute("TC_Zeus_POS_0002")]
        [NUnit.Framework.CategoryAttribute("PositiveTests")]
        public void CreateAnEyeExamAppointmentOnMrsLaneInAFranchiseStore()
        {
            string[] tagsOfScenario = new string[] {
                    "TC_Zeus_POS_0002",
                    "PositiveTests"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create an eye exam appointment on mrs lane in a franchise store", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 29
 testRunner.When("I click on distribution center change button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
 testRunner.And("I select a store named \"0027 | Stanton Optical - Palm Springs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.Then("The store should change to \"0027 | Stanton Optical - Palm Springs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 32
 testRunner.Given("I go to the Scheduler menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 33
 testRunner.And("I go to the POS menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
 testRunner.And("Delete any existing appointments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
 testRunner.And("Check for slot availablity in MRS lane \"MRS ( 4 )\" for today\'s date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
 testRunner.And("I click on the first available slot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
 testRunner.And("I search and open the \"first\" patient created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "AppointmentType"});
                table12.AddRow(new string[] {
                            "Eye Exam"});
#line 38
 testRunner.And("I provide the following appointment type for scheduling a slot", ((string)(null)), table12, "And ");
#line hidden
#line 41
 testRunner.When("I click on confirmed button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.Then("The appointment is created and succesful message with appointment number is shown" +
                        " on screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create double eye exam appointment in the same timeslot on mrs lane in a corporat" +
            "e store")]
        [NUnit.Framework.CategoryAttribute("TC_Zeus_POS_0003")]
        [NUnit.Framework.CategoryAttribute("PositiveTests")]
        public void CreateDoubleEyeExamAppointmentInTheSameTimeslotOnMrsLaneInACorporateStore()
        {
            string[] tagsOfScenario = new string[] {
                    "TC_Zeus_POS_0003",
                    "PositiveTests"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create double eye exam appointment in the same timeslot on mrs lane in a corporat" +
                    "e store", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 46
 testRunner.When("I click on distribution center change button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 47
 testRunner.And("I select a store named \"5001 | Doctor - Mishawaka\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
 testRunner.Then("The store should change to \"5001 | Doctor - Mishawaka\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 49
 testRunner.Given("I go to the Scheduler menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 50
 testRunner.And("I go to the POS menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
 testRunner.And("Delete any existing appointments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
 testRunner.When("I click on distribution center change button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
 testRunner.And("I select a store named \"5001 | Doctor - Mishawaka\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
 testRunner.Then("The store should change to \"5001 | Doctor - Mishawaka\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 55
 testRunner.Given("I go to the Scheduler menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 56
 testRunner.And("I go to the POS menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
 testRunner.And("Delete any existing appointments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
 testRunner.And("Check for slot availablity in MRS lane \"MRS ( 4 )\" for today\'s date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
 testRunner.And("I click on the first available slot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
 testRunner.And("I search and open the \"first\" patient created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "AppointmentType"});
                table13.AddRow(new string[] {
                            "Eye Exam"});
#line 61
 testRunner.And("I provide the following appointment type for scheduling a slot", ((string)(null)), table13, "And ");
#line hidden
#line 64
 testRunner.When("I click on confirmed button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 65
 testRunner.Then("The appointment is created and succesful message with appointment number is shown" +
                        " on screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 66
 testRunner.When("I right click and select \"Double Book\" on an existing appointment for the \"first\"" +
                        " patient created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
 testRunner.Then("A modal window should appear with the message \"Are you sure you want to add anoth" +
                        "er appointment?\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 68
 testRunner.Given("I confirm that I want to add another appointment in the same timeslot for a diffe" +
                        "rent patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 69
 testRunner.And("I search and open the \"second\" patient created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "AppointmentType"});
                table14.AddRow(new string[] {
                            "Eye Exam"});
#line 70
 testRunner.And("I provide the following appointment type for scheduling a slot", ((string)(null)), table14, "And ");
#line hidden
#line 73
 testRunner.When("I click on confirmed button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 74
 testRunner.Then("The appointment is created and succesful message with appointment number is shown" +
                        " on screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cut and paste an eye exam appointment from one timeslot to another on mrs lane in" +
            " a corporate store")]
        [NUnit.Framework.CategoryAttribute("TC_Zeus_POS_0004")]
        [NUnit.Framework.CategoryAttribute("PositiveTests")]
        public void CutAndPasteAnEyeExamAppointmentFromOneTimeslotToAnotherOnMrsLaneInACorporateStore()
        {
            string[] tagsOfScenario = new string[] {
                    "TC_Zeus_POS_0004",
                    "PositiveTests"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cut and paste an eye exam appointment from one timeslot to another on mrs lane in" +
                    " a corporate store", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 78
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 79
 testRunner.Given("Check for slot availablity in MRS lane \"MRS ( 4 )\" for today\'s date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 80
 testRunner.And("I click on the first available slot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 81
 testRunner.And("I search and open the \"first\" patient created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "AppointmentType"});
                table15.AddRow(new string[] {
                            "Eye Exam"});
#line 82
 testRunner.And("I provide the following appointment type for scheduling a slot", ((string)(null)), table15, "And ");
#line hidden
#line 85
 testRunner.When("I click on confirmed button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 86
 testRunner.Then("The appointment is created and succesful message with appointment number is shown" +
                        " on screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 87
 testRunner.When("I right click and select \"Cut\" on an existing appointment for the \"first\" patient" +
                        " created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 88
 testRunner.Then("A cross icon should show on the appointment for the \"first\" patient created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 89
 testRunner.When("I right click on the next available slot in MRS lane \"MRS ( 4 )\" and select \"Past" +
                        "e\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 90
 testRunner.Then("Appointment details updated success message should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Drag and drop an eye exam appointment from one timeslot to another on mrs lane in" +
            " a corporate store")]
        [NUnit.Framework.CategoryAttribute("TC_Zeus_POS_0005")]
        [NUnit.Framework.CategoryAttribute("PositiveTests")]
        public void DragAndDropAnEyeExamAppointmentFromOneTimeslotToAnotherOnMrsLaneInACorporateStore()
        {
            string[] tagsOfScenario = new string[] {
                    "TC_Zeus_POS_0005",
                    "PositiveTests"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag and drop an eye exam appointment from one timeslot to another on mrs lane in" +
                    " a corporate store", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 93
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 94
 testRunner.Given("Check for slot availablity in MRS lane \"MRS ( 4 )\" for today\'s date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 95
 testRunner.And("I click on the first available slot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
 testRunner.And("I search and open the \"first\" patient created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "AppointmentType"});
                table16.AddRow(new string[] {
                            "Eye Exam"});
#line 97
 testRunner.And("I provide the following appointment type for scheduling a slot", ((string)(null)), table16, "And ");
#line hidden
#line 100
 testRunner.When("I click on confirmed button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 101
 testRunner.Then("The appointment is created and succesful message with appointment number is shown" +
                        " on screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 102
 testRunner.When("I drag the existing appointment and drop in the next available slot in MRS lane \"" +
                        "MRS ( 4 )\" for the \"first\" patient created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 103
 testRunner.Then("Appointment details updated success message should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Right Click and validate all options on the created appointment")]
        [NUnit.Framework.CategoryAttribute("TC_Zeus_POS_0006")]
        [NUnit.Framework.CategoryAttribute("PositiveTests")]
        public void RightClickAndValidateAllOptionsOnTheCreatedAppointment()
        {
            string[] tagsOfScenario = new string[] {
                    "TC_Zeus_POS_0006",
                    "PositiveTests"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Right Click and validate all options on the created appointment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 106
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 107
 testRunner.Given("Check for slot availablity in MRS lane \"MRS ( 4 )\" for today\'s date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 108
 testRunner.And("I click on the first available slot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
 testRunner.And("I search and open the \"first\" patient created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "AppointmentType"});
                table17.AddRow(new string[] {
                            "Eye Exam"});
#line 110
 testRunner.And("I provide the following appointment type for scheduling a slot", ((string)(null)), table17, "And ");
#line hidden
#line 113
 testRunner.When("I click on confirmed button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 114
 testRunner.Then("The appointment is created and succesful message with appointment number is shown" +
                        " on screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 115
 testRunner.When("I right click on an existing appointment for the \"first\" patient created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "RightClickMenuItems"});
                table18.AddRow(new string[] {
                            "Patient Details"});
                table18.AddRow(new string[] {
                            "Edit"});
                table18.AddRow(new string[] {
                            "Double Book"});
                table18.AddRow(new string[] {
                            "Cut"});
                table18.AddRow(new string[] {
                            "Change Status"});
                table18.AddRow(new string[] {
                            "Create Order"});
                table18.AddRow(new string[] {
                            "Launch MRS"});
                table18.AddRow(new string[] {
                            "View Journals"});
                table18.AddRow(new string[] {
                            "Change Store"});
#line 116
 testRunner.Then("Verify the following options are present in the context menu", ((string)(null)), table18, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
